import html
from io import BytesIO
from typing import Optional, List

from telegram import Message, Update, Bot, User, Chat, ParseMode
from telegram.error import BadRequest, TelegramError
from telegram.ext import run_async, CommandHandler, MessageHandler, Filters
from telegram.utils.helpers import mention_html

import tg_bot.modules.sql.global_bans_sql as sql
from tg_bot import dispatcher, OWNER_ID, SUDO_USERS, SUPPORT_USERS, STRICT_GBAN
from tg_bot.modules.helper_funcs.chat_status import user_admin, is_user_admin
from tg_bot.modules.helper_funcs.extraction import extract_user, extract_user_and_text
from tg_bot.modules.helper_funcs.filters import CustomFilters
from tg_bot.modules.helper_funcs.misc import send_to_list
from tg_bot.modules.sql.users_sql import get_all_chats

GBAN_ENFORCE_GROUP = 6

GBAN_ERRORS = {
    "KullanÄ±cÄ± sohbetin yÃ¶neticisidir",
    "Sohbet bulunamadÄ±",
    "Sohbet Ã¼yesini yasaklamak iÃ§in yeterli hakkÄ±n yok",
    "KullanÄ±cÄ± katÄ±lÄ±mcÄ± deÄŸil",
    "ID geÃ§ersiz",
    "Grup sohbeti devre dÄ±ÅŸÄ± bÄ±rakÄ±ldÄ±",
    "Bir davetliyi atÄ±yor olmasÄ± gerekir",
    "Sohbet yÃ¶neticisi gerekli",
    "YalnÄ±zca grubun sahibi grup yÃ¶neticilerini atabilir",
    "Kanal Ã¶zel",
    "Sohbette deÄŸil"
}

UNGBAN_ERRORS = {
    "KullanÄ±cÄ± sohbetin yÃ¶neticisi",
    "Sohbet bulunamadÄ±",
    "Sohbet Ã¼yesini yasaklamak iÃ§in yeterli hakkÄ±n yok",
    "KullanÄ±cÄ± katÄ±lÄ±mcÄ± deÄŸil",
    "YÃ¶ntem yalnÄ±zca sÃ¼per grup ve kanal sohbetleri iÃ§in kullanÄ±labilir",
    "Sohbette deÄŸil",
    "Kanal Ã¶zel",
    "Sohbet yÃ¶neticisi gerekli",
    "ID geÃ§ersiz",
}


@run_async
def gban(bot: Bot, update: Update, args: List[str]):
    message = update.effective_message  # type: Optional[Message]

    user_id, reason = extract_user_and_text(message, args)

    if not user_id:
        message.reply_text("Bir kullanÄ±cÄ±ya atÄ±fta bulunmuyorsunuz.")
        return

    if int(user_id) in SUDO_USERS:
        message.reply_text("KÃ¼Ã§Ã¼k gÃ¶zlerimden kaÃ§mÄ±yor ... bir yÃ¶netici savaÅŸÄ±! Neden birbirinizle uÄŸraÅŸÄ±yorsunuz kardeÅŸim?")
        return

    if int(user_id) in SUPPORT_USERS:
        message.reply_text("Haaha birisi bir destek kullanÄ±cÄ±sÄ±nÄ± yasaklamaya Ã§alÄ±ÅŸÄ±yor! PatlamÄ±ÅŸ mÄ±sÄ±r kapÄ±p geliyorum")
        return

    if user_id == bot.id:
        message.reply_text("-_- Ã‡ok komik, Beni yasaklayacak adam daha anasÄ±nÄ±n karnÄ±ndan doÄŸmadÄ±? Ä°yi deneme.")
        return

    try:
        user_chat = bot.get_chat(user_id)
    except BadRequest as excp:
        message.reply_text(excp.message)
        return

    if user_chat.type != 'private':
        message.reply_text("KullanÄ±cÄ± yok!")
        return

    if sql.is_user_gbanned(user_id):
        if not reason:
            message.reply_text("Bu kullanÄ±cÄ± zaten yasaklanmÄ±ÅŸ; Sebebi yok, sen de bana yenisini sÃ¶ylemedin...")
            return

        old_reason = sql.update_gban_reason(user_id, user_chat.username or user_chat.first_name, reason)
        if old_reason:
            message.reply_text("Zaten yasaklanmÄ±ÅŸ, Sebebi de ÅŸu:\n"
                               "<code>{}</code>\n"
                               "Gittim ve yeni sebebinle gÃ¼ncelledim!".format(html.escape(old_reason)),
                               parse_mode=ParseMode.HTML)
        else:
            message.reply_text("Bu kullanÄ±cÄ± zaten yasaklanmÄ±ÅŸ, ancak herhangi bir neden belirlenmemiÅŸ; Gittim ve gÃ¼ncelledim!")

        return

    message.reply_text("*Yasak tokmaÄŸÄ± kafaya iner* ğŸ˜‰")

    banner = update.effective_user  # type: Optional[User]
    send_to_list(bot, SUDO_USERS + SUPPORT_USERS,
                 "{}, ÅŸu kullanÄ±cÄ±yÄ± yasakladÄ± {} "
                 "Ã‡Ã¼nkÃ¼:\n{}".format(mention_html(banner.id, banner.first_name),
                                       mention_html(user_chat.id, user_chat.first_name), reason or "No reason given"),
                 html=True)

    sql.gban_user(user_id, user_chat.username or user_chat.first_name, reason)

    chats = get_all_chats()
    for chat in chats:
        chat_id = chat.chat_id

        # Check if this group has disabled gbans
        if not sql.does_chat_gban(chat_id):
            continue

        try:
            bot.kick_chat_member(chat_id, user_id)
        except BadRequest as excp:
            if excp.message in GBAN_ERRORS:
                pass
            else:
                message.reply_text("{} nedeniyle yasak yapÄ±lamadÄ±".format(excp.message))
                send_to_list(bot, SUDO_USERS + SUPPORT_USERS, "{} nedeniyle yasak yapÄ±lamadÄ±".format(excp.message))
                sql.ungban_user(user_id)
                return
        except TelegramError:
            pass

    send_to_list(bot, SUDO_USERS + SUPPORT_USERS, "Yasaklama tamam!")
    message.reply_text("KiÅŸi yasaklandÄ±.")


@run_async
def ungban(bot: Bot, update: Update, args: List[str]):
    message = update.effective_message  # type: Optional[Message]

    user_id = extract_user(message, args)
    if not user_id:
        message.reply_text("Bir kullanÄ±cÄ±ya atÄ±fta bulunmuyorsunuz.")
        return

    user_chat = bot.get_chat(user_id)
    if user_chat.type != 'private':
        message.reply_text("KullanÄ±cÄ± yok!")
        return

    if not sql.is_user_gbanned(user_id):
        message.reply_text("Bu kullanÄ±cÄ± yasaklanmadÄ±!")
        return

    banner = update.effective_user  # type: Optional[User]

    message.reply_text("Bu memlekette {} iÃ§in ikinci bir ÅŸans vereceÄŸim.".format(user_chat.first_name))

    send_to_list(bot, SUDO_USERS + SUPPORT_USERS,
                 "{} kullanÄ±cÄ±nÄ±n yasaklamasÄ±nÄ± kaldÄ±rdÄ± {}".format(mention_html(banner.id, banner.first_name),
                                                   mention_html(user_chat.id, user_chat.first_name)),
                 html=True)

    chats = get_all_chats()
    for chat in chats:
        chat_id = chat.chat_id

        # Check if this group has disabled gbans
        if not sql.does_chat_gban(chat_id):
            continue

        try:
            member = bot.get_chat_member(chat_id, user_id)
            if member.status == 'kicked':
                bot.unban_chat_member(chat_id, user_id)

        except BadRequest as excp:
            if excp.message in UNGBAN_ERRORS:
                pass
            else:
                message.reply_text("{} nedeniyle yasak kaldÄ±rÄ±lamadÄ±: ".format(excp.message))
                bot.send_message(OWNER_ID, "{} nedeniyle yasak kaldÄ±rÄ±lamadÄ±:".format(excp.message))
                return
        except TelegramError:
            pass

    sql.ungban_user(user_id)

    send_to_list(bot, SUDO_USERS + SUPPORT_USERS, "yasak kaldÄ±rÄ±ldÄ±!")

    message.reply_text("KiÅŸinin yasaÄŸÄ± kaldÄ±rÄ±ldÄ±.")


@run_async
def gbanlist(bot: Bot, update: Update):
    banned_users = sql.get_gban_list()

    if not banned_users:
        update.effective_message.reply_text("YasaklÄ± kullanÄ±cÄ± yok! Ã‡ok nazik insanlar var ÅŸu hayatta...")
        return

    banfile = 'Bu meymenetsiz gruptan atÄ±ldÄ±.\n'
    for user in banned_users:
        banfile += "[x] {} - {}\n".format(user["name"], user["user_id"])
        if user["reason"]:
            banfile += "Sebep: {}\n".format(user["reason"])

    with BytesIO(str.encode(banfile)) as output:
        output.name = "gbanlist.txt"
        update.effective_message.reply_document(document=output, filename="gbanlist.txt",
                                                caption="Ä°ÅŸte ÅŸu anda yasaklanmÄ±ÅŸ kullanÄ±cÄ±larÄ±n listesi.")


def check_and_ban(update, user_id, should_message=True):
    if sql.is_user_gbanned(user_id):
        update.effective_chat.kick_member(user_id)
        if should_message:
            update.effective_message.reply_text("Bu, grup adabÄ±mÄ±za uymayan bir insan, burada olmamalÄ± !")


@run_async
def enforce_gban(bot: Bot, update: Update):
    # Not using @restrict handler to avoid spamming - just ignore if cant gban.
    if sql.does_chat_gban(update.effective_chat.id) and update.effective_chat.get_member(bot.id).can_restrict_members:
        user = update.effective_user  # type: Optional[User]
        chat = update.effective_chat  # type: Optional[Chat]
        msg = update.effective_message  # type: Optional[Message]

        if user and not is_user_admin(chat, user.id):
            check_and_ban(update, user.id)

        if msg.new_chat_members:
            new_members = update.effective_message.new_chat_members
            for mem in new_members:
                check_and_ban(update, mem.id)

        if msg.reply_to_message:
            user = msg.reply_to_message.from_user  # type: Optional[User]
            if user and not is_user_admin(chat, user.id):
                check_and_ban(update, user.id, should_message=False)


@run_async
@user_admin
def gbanstat(bot: Bot, update: Update, args: List[str]):
    if len(args) > 0:
        if args[0].lower() in ["ac", "evet"]:
            sql.enable_gbans(update.effective_chat.id)
            update.effective_message.reply_text("Bu grupta global yasaklarÄ± etkinleÅŸtirdim. Bu seni korumaya yardÄ±mcÄ± olacak "
                                                "Bu seni korumaya yardÄ±mcÄ± olacak. Ã–zellikle spam mesajcÄ±lara ve trollere karÅŸÄ±")
        elif args[0].lower() in ["kapat", "hayir"]:
            sql.disable_gbans(update.effective_chat.id)
            update.effective_message.reply_text("Bu grupta global yasaklarÄ± devre dÄ±ÅŸÄ± bÄ±raktÄ±m.  "
                                                "Global yasaklar artÄ±k kullanÄ±cÄ±larÄ±nÄ±zÄ± etkilemeyecek "
                                                "Trollerden ve spam gÃ¶nderenlerden daha az korunacaksÄ±nÄ±z!")
    else:
        update.effective_message.reply_text("Bir ayar seÃ§mek iÃ§in bana bazÄ± argÃ¼manlar ver! ac/evet, kapat/hayir!\n\n"
                                            "Mevcut ayarÄ±nÄ±z: {}\n"
                                            "True olduÄŸunda, bir global yasak grubunuzda aktif hale gelecek, korumam altÄ±nda olacaksÄ±nÄ±z. "
                                            "YanlÄ±ÅŸ olduÄŸunda, gruplarda yazÄ±lan mesajlar, spam gÃ¶nderenlerin insafÄ±na "
                                            "kalmÄ±ÅŸ.".format(sql.does_chat_gban(update.effective_chat.id)))


def __stats__():
    return "{} global yasaklanmÄ±ÅŸ kullanÄ±cÄ±.".format(sql.num_gbanned_users())


def __user_info__(user_id):
    is_gbanned = sql.is_user_gbanned(user_id)

    text = "Global olarak yasaklandÄ±: <b>{}</b>"
    if is_gbanned:
        text = text.format("Evet")
        user = sql.get_gbanned_user(user_id)
        if user.reason:
            text += "\nReason: {}".format(html.escape(user.reason))
    else:
        text = text.format("HayÄ±r")
    return text


def __migrate__(old_chat_id, new_chat_id):
    sql.migrate_chat(old_chat_id, new_chat_id)


def __chat_settings__(chat_id, user_id):
    return "Bu sohbet * global yasak* uyguluyor: `{}`.".format(sql.does_chat_gban(chat_id))


__help__ = """
KÃ¼resel yasaklar olarak da bilinen *Global yasaklar*, bot sahipleri tarafÄ±ndan spam gÃ¶nderenleri tÃ¼m gruplarda yasaklamak iÃ§in kullanÄ±lÄ±r.\
Bu aynÄ± zamanda sohbetlerinizi korumama yardÄ±mcÄ± olur. Spam mesajlardan oluÅŸan seri mesajlarÄ± otomatik olarak silerim.

*Sadece YÃ¶neticiler:*
 - /gyasakdurumu <ac/kapa/evet/hayir>: Global yasaklamalarÄ±n grubunuz Ã¼zerindeki etkisini devre dÄ±ÅŸÄ± bÄ±rakÄ±r veya mevcut ayarlarÄ±nÄ±za geri dÃ¶ner.
 - /gyasaklistesi: Mevcut yasaklarÄ± gÃ¶sterir.
 - /gyasakla: MesajÄ±na cevap verilen kullanÄ±cÄ±yÄ± global yasaklÄ± listesine atar
 - /gyasakiptal: Global yasaklÄ± kullanÄ±cÄ±yÄ± listeden kaldÄ±rÄ±r

"""

__mod_name__ = "Global Yasaklar"

GBAN_HANDLER = CommandHandler("gyasakla", gban, pass_args=True,
                              filters=CustomFilters.sudo_filter | CustomFilters.support_filter)
UNGBAN_HANDLER = CommandHandler("gyasakiptal", ungban, pass_args=True,
                                filters=CustomFilters.sudo_filter | CustomFilters.support_filter)
GBAN_LIST = CommandHandler("gyasaklistesi", gbanlist,
                           filters=CustomFilters.sudo_filter | CustomFilters.support_filter)

GBAN_STATUS = CommandHandler("gyasakdurumu", gbanstat, pass_args=True, filters=Filters.group)

GBAN_ENFORCER = MessageHandler(Filters.all & Filters.group, enforce_gban)

dispatcher.add_handler(GBAN_HANDLER)
dispatcher.add_handler(UNGBAN_HANDLER)
dispatcher.add_handler(GBAN_LIST)
dispatcher.add_handler(GBAN_STATUS)

if STRICT_GBAN:  # enforce GBANS if this is set
    dispatcher.add_handler(GBAN_ENFORCER, GBAN_ENFORCE_GROUP)
